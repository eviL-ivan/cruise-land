/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—é—Ç–∞—Ö –∏ —Ü–µ–Ω–∞—Ö —Å —Å–∞–π—Ç–∞ Swan Hellenic
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/fetch-cabin-data.js
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

const CRUISE_URL = 'https://www.swanhellenic.com/cruise/south-atlantic-cruise-from-south-africa-to-antarctica?id=432&seats=2';
const OUTPUT_DIR = path.join(__dirname, '..', 'public', 'cabins');
const DATA_FILE = path.join(__dirname, '..', 'data', 'cabin-prices.json');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

if (!fs.existsSync(path.dirname(DATA_FILE))) {
  fs.mkdirSync(path.dirname(DATA_FILE), { recursive: true });
}

console.log('üö¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—é—Ç–∞—Ö —Å —Å–∞–π—Ç–∞ Swan Hellenic...');
console.log('URL:', CRUISE_URL);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadImage(url, filepath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filepath);
    https.get(url, (response) => {
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ:', path.basename(filepath));
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(filepath, () => {});
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', url);
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function fetchPage(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      let data = '';
      response.on('data', (chunk) => {
        data += chunk;
      });
      response.on('end', () => {
        resolve(data);
      });
    }).on('error', reject);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    const html = await fetchPage(CRUISE_URL);

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä:', (html.length / 1024).toFixed(2), 'KB');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const htmlFile = path.join(__dirname, '..', 'data', 'cruise-page.html');
    fs.writeFileSync(htmlFile, html);
    console.log('üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:', htmlFile);

    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—é—Ç–∞—Ö –≤ HTML
    // –û–±—ã—á–Ω–æ —Ü–µ–Ω—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—é—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ JSON –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–ª–∏ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö

    // –ü–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
    const jsonMatches = html.match(/<script[^>]*>(.*?cabins?.*?)<\/script>/gis);

    if (jsonMatches) {
      console.log('\nüîç –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—é—Ç–∞—Ö:', jsonMatches.length);

      // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON
      jsonMatches.forEach((match, index) => {
        const scriptFile = path.join(__dirname, '..', 'data', `script-${index}.txt`);
        fs.writeFileSync(scriptFile, match);
      });
    }

    // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—é—Ç
    const imageRegex = /(https?:\/\/[^"']*(?:cabin|suite|room)[^"']*\.(?:jpg|jpeg|png|webp))/gi;
    const images = [...new Set(html.match(imageRegex) || [])];

    console.log('\nüñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—é—Ç:', images.length);

    if (images.length > 0) {
      console.log('\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

      for (let i = 0; i < Math.min(images.length, 20); i++) {
        const imageUrl = images[i];
        const filename = `cabin-${i + 1}${path.extname(new URL(imageUrl).pathname)}`;
        const filepath = path.join(OUTPUT_DIR, filename);

        try {
          await downloadImage(imageUrl, filepath);
        } catch (err) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:', imageUrl);
        }
      }
    }

    // –ü–æ–∏—Å–∫ —Ü–µ–Ω
    const priceRegex = /(?:‚Ç¨|USD|¬£|‚ÇΩ)\s*[\d,]+(?:\.\d{2})?|\b\d{1,3}(?:,\d{3})*(?:\.\d{2})?\s*(?:‚Ç¨|USD|¬£|‚ÇΩ)/g;
    const prices = html.match(priceRegex) || [];

    console.log('\nüí∞ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω:', [...new Set(prices)].slice(0, 10));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const cabinData = {
      url: CRUISE_URL,
      fetchedAt: new Date().toISOString(),
      images: images.slice(0, 20),
      prices: [...new Set(prices)],
      note: '–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫–∞—é—Ç–∞–º–∏'
    };

    fs.writeFileSync(DATA_FILE, JSON.stringify(cabinData, null, 2));
    console.log('\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', DATA_FILE);

    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:');
    console.log('  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', OUTPUT_DIR);
    console.log('  - –î–∞–Ω–Ω—ã–µ:', DATA_FILE);
    console.log('  - HTML:', htmlFile);
    console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();
