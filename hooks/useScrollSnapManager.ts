"use client";

import { useEffect, useRef, useState, useCallback } from "react";

interface ScrollSnapOptions {
  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–Ω—ç–ø–∞: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π
  direction?: "vertical" | "horizontal";
  // –°—Ç—Ä–æ–≥–æ—Å—Ç—å —Å–Ω—ç–ø–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π
  type?: "mandatory" | "proximity";
  // –ü–æ—Ä–æ–≥ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (0-1)
  threshold?: number;
  // –û—Ç—Å—Ç—É–ø –æ—Ç viewport –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
  rootMargin?: string;
  // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è snap
  sectionSelector?: string;
  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü)
  totalSections?: number;
  // –í–∫–ª—é—á–∏—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
  debug?: boolean;
}

export function useScrollSnapManager(options: ScrollSnapOptions = {}) {
  const {
    direction = "vertical",
    type = "mandatory",
    threshold = 0.1,
    rootMargin = "0px",
    sectionSelector = "[data-snap-section]",
    totalSections = 0,
    debug = false,
  } = options;

  const containerRef = useRef<HTMLDivElement>(null);
  const [isSnapActive, setIsSnapActive] = useState(false);
  const [visibleSections, setVisibleSections] = useState<number>(0);
  const [currentSectionIndex, setCurrentSectionIndex] = useState<number>(-1);
  const previousScrollSnapType = useRef<string>("");
  const previousScrollBehavior = useRef<string>("");
  const currentSnapType = useRef<"mandatory" | "proximity">(type);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ snap (–≤—ã–Ω–µ—Å–µ–º –∏–∑ useEffect)
  const updateScrollSnapType = useCallback((newType: "mandatory" | "proximity") => {
    const htmlElement = document.documentElement;
    const snapDirection = direction === "vertical" ? "y" : "x";
    const newValue = `${snapDirection} ${newType}`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setProperty —Å important –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    htmlElement.style.setProperty("scroll-snap-type", newValue, "important");

    // if (debug) {
    //   console.log(`üîÅ Updated scroll-snap-type to: ${newValue}`);
    //   console.log(`üîÅ Actual HTML value: ${htmlElement.style.scrollSnapType}`);
    //   console.log(`üîÅ Computed style: ${window.getComputedStyle(htmlElement).scrollSnapType}`);
    // }
  }, [direction, debug]);

  useEffect(() => {
    if (!containerRef.current) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const htmlElement = document.documentElement;
    const computedStyle = window.getComputedStyle(htmlElement);
    previousScrollSnapType.current = computedStyle.scrollSnapType || "none";
    previousScrollBehavior.current = computedStyle.scrollBehavior || "auto";

    // if (debug) {
    //   console.log("üìå useScrollSnapManager initialized");
    //   console.log("Container ref:", containerRef.current);
    // }

    // –°–æ–∑–¥–∞—ë–º observer –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const containerObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          // if (debug) {
          //   console.log("üëÅ Container visibility changed:", {
          //     isIntersecting: entry.isIntersecting,
          //     intersectionRatio: entry.intersectionRatio,
          //     target: entry.target
          //   });
          // }

          if (entry.isIntersecting) {
            // if (debug) console.log("üéØ Scroll snap container entered viewport");
            setIsSnapActive(true);
            enableScrollSnap();
          } else {
            // if (debug) console.log("üëã Scroll snap container left viewport");
            setIsSnapActive(false);
            disableScrollSnap();
          }
        });
      },
      {
        root: null,
        rootMargin,
        threshold,
      }
    );

    // –°–æ–∑–¥–∞—ë–º observer –¥–ª—è —Å–µ–∫—Ü–∏–π (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏)
    const sectionObserver = new IntersectionObserver(
      (entries) => {
        const visibleCount = entries.filter((e) => e.isIntersecting).length;
        setVisibleSections(visibleCount);

        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–∏–¥–∏–º—É—é —Å–µ–∫—Ü–∏—é
        let mostVisibleEntry = null;
        let maxRatio = 0;

        entries.forEach((entry) => {
          if (entry.isIntersecting && entry.intersectionRatio > maxRatio) {
            maxRatio = entry.intersectionRatio;
            mostVisibleEntry = entry;
          }
        });

        if (mostVisibleEntry) {
          const target = mostVisibleEntry.target as HTMLElement;
          const sectionIndex = parseInt(target.dataset.sectionIndex || "-1");

          if (sectionIndex !== -1) {
            setCurrentSectionIndex(sectionIndex);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø snap –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
            const isFirstSection = sectionIndex === 0;
            const isLastSection = totalSections > 0 && sectionIndex === totalSections - 1;

            const newSnapType = (isFirstSection || isLastSection) ? "proximity" : "mandatory";

            if (currentSnapType.current !== newSnapType) {
              currentSnapType.current = newSnapType;

              // if (debug) {
              //   console.log(`üîÑ Switching snap type to ${newSnapType} for section ${sectionIndex}`);
              // }

              // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø snap –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
              const htmlElement = document.documentElement;
              if (htmlElement.classList.contains("scroll-snap-active")) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                updateScrollSnapType(newSnapType);

                // –ò –µ—â–µ —Ä–∞–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ event loop –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
                setTimeout(() => {
                  if (htmlElement.classList.contains("scroll-snap-active")) {
                    updateScrollSnapType(newSnapType);
                  }
                }, 0);
              }
            }
          }
        }

        // if (debug && mostVisibleEntry) {
        //   console.log(`üìç Most visible section:`, mostVisibleEntry.target);
        // }
      },
      {
        root: null,
        rootMargin: "0px",
        threshold: [0.3, 0.5, 0.7, 1],
      }
    );

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è scroll-snap
    function enableScrollSnap() {
      const htmlElement = document.documentElement;
      const snapDirection = direction === "vertical" ? "y" : "x";

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø snap, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const snapTypeToUse = currentSnapType.current || type;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º scroll-snap-type –∫ html —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ç–µ–∫—É—â–∏–º —Ç–∏–ø–æ–º (—Å important)
      htmlElement.style.setProperty("scroll-snap-type", `${snapDirection} ${snapTypeToUse}`, "important");
      htmlElement.style.scrollBehavior = "smooth";

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è CSS
      htmlElement.classList.add("scroll-snap-active");
      if (direction === "horizontal") {
        htmlElement.classList.add("scroll-snap-horizontal");
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º scroll-snap-align –∫ —Å–µ–∫—Ü–∏—è–º
      const sections = document.querySelectorAll(sectionSelector);
      sections.forEach((section) => {
        (section as HTMLElement).style.scrollSnapAlign = "start";
        (section as HTMLElement).style.scrollSnapStop = "always";
      });

      // if (debug) {
      //   console.log(`‚úÖ Scroll snap enabled: ${snapDirection} ${snapTypeToUse}`);
      // }
    }

    function disableScrollSnap() {
      const htmlElement = document.documentElement;

      // –£–¥–∞–ª—è–µ–º inline —Å—Ç–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
      htmlElement.style.removeProperty("scroll-snap-type");
      htmlElement.style.scrollBehavior = previousScrollBehavior.current || "auto";

      // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã
      htmlElement.classList.remove("scroll-snap-active", "scroll-snap-horizontal");

      // –£–¥–∞–ª—è–µ–º scroll-snap-align —Å —Å–µ–∫—Ü–∏–π
      const sections = document.querySelectorAll(sectionSelector);
      sections.forEach((section) => {
        (section as HTMLElement).style.scrollSnapAlign = "";
        (section as HTMLElement).style.scrollSnapStop = "";
      });

      // if (debug) {
      //   console.log("‚ùå Scroll snap disabled");
      // }
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    if (containerRef.current) {
      containerObserver.observe(containerRef.current);

      // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Å–µ–∫—Ü–∏—è–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      const sections = containerRef.current.querySelectorAll(sectionSelector);
      sections.forEach((section, index) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫ —Å–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!(section as HTMLElement).dataset.sectionIndex) {
          (section as HTMLElement).dataset.sectionIndex = index.toString();
        }
        sectionObserver.observe(section);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–∞ —Å–µ–∫—Ü–∏—è —É–∂–µ –≤–∏–¥–∏–º–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const rect = section.getBoundingClientRect();
        const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
        if (isVisible && rect.top <= window.innerHeight / 2) {
          // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤–∏–¥–∏–º–æ–π —Å–µ–∫—Ü–∏–∏
          const isFirst = index === 0;
          const isLast = totalSections > 0 && index === totalSections - 1;
          currentSnapType.current = (isFirst || isLast) ? "proximity" : "mandatory";

          // if (debug) {
          //   console.log(`üéØ Initial visible section: ${index}, snap type: ${currentSnapType.current}`);
          // }
        }
      });
    }

    // Cleanup
    return () => {
      containerObserver.disconnect();
      sectionObserver.disconnect();
      disableScrollSnap();
    };
  }, [direction, type, threshold, rootMargin, sectionSelector, totalSections, debug, updateScrollSnapType]);

  return {
    containerRef,
    isSnapActive,
    visibleSections,
    currentSectionIndex,
  };
}